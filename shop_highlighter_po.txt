// ==UserScript==
// @name         Restocking Profit Highlighter (Post Office)
// @namespace    http://www.jellyneo.com
// @version      1.1
// @description  Automatically highlights profitable items in Neopets stores.
// @author       MediaTriggerWords, ayyylmao, modified by Astralruby on Jellyneo
// @match        https://www.neopets.com/objects.phtml?type=shop&obj_type=58
// @grant        none
// ==/UserScript==

(function() {

    var patterns = [], classes = [];

    /*    The following define the classes of words.  If the first
    character of the specification is "=", the match will be
    case-sensitive, otherwise it will be case-insensitive.
    The specification is a regular expression, and should
    contain metacharacters to handle variant spellings and
    plurals.  Any grouping within these patterns *must* be done
    with a (?: ... ) specification to avoid messing up the
    capture from the text string.

    You may add additional categories as you wish, but be sure to
    declare their rendering in the style definition below.  */

    //    Rendering styles for our various word classes

    addGlobalStyle('span.red { background-color: #000000; color: #ff1a00; } ' +
           'span.yellow { background-color: #000000; color: #fdff00;} ' +
           'span.green { background-color: #000000; color: #23ea11;} ' +
                 'span.blue { background-color: #000000; color: #01fcfc} ' );

    // RED items. Items in this list will appear as red on black

    defwords(["Tuskaninny Day Stamp", "Celestial Talisman Stamp", "Zombie Faleinn Stamp", "Darigan Shield Stamp", "Scarab Stamp", "Jelly Pop Stamp", "Tyrannian Plateau Stamp", "Velm Stamp", "The Black Pawkeet Stamp", "Mayor of Moltara Stamp", "Cyodrakes Gaze Logo Stamp", "Meridell Gardens Stamp", "Sliding Darblat Stamp", "Hannah Stamp", "Pineapple Dessert Stamp", "Docked Ship Stamp", "NeoQuest II Logo Stamp", "Mutant Grundo Stamp", "Bruno Stamp", "Dark Graspberry Stamp", "Maraquan Blade Specialist Stamp", "Maraquan Charger Stamp", "Tasu Stamp", "Librarian Stamp", "Faerie Furniture Shopkeeper Stamp", "Mellow Marauders Plushie Stamp"],
    "red");

    //    YELLOW words. These items are black background with yellow text.

    defwords(["Thoughtful Linae Stamp", "Zyrolon Stamp", "Zurroball Stamp", "Shenkuu Mask Stamp", "Desert Paintbrush Stamp", "Hoban Stamp", "Neopia Central Scene Stamp", "Caylis Stamp", "Evil Fuzzles Stamp", "Eleus Stamp", "Dubloon-O-Matic Stamp", "Rink Runner Stamp", "Charms Stamp", "Lisha vs Zombie Lisha Stamp", "Garin To The Rescue Stamp", "Castle Defender Stamp", "Rod Of Dark Nova Stamp", "Kentari Spyglass Stamp", "Meridell Shield Stamp", "Sunblade Stamp", "Cancelled Stamp", "Fountain Faerie Stamp", "Usukiland Stamp", "Destruction of Faerieland Stamp", "Tylix Stamp", "Jewelled Scarab Stamp", "Wand Of The Dark Faerie Stamp", "Desert Arms Stamp", "Hubrid Nox Commemorative Stamp", "Illusen Stamp", "Mokti and Rikti Stamp", "Peaceful Coexistence Stamp", "Buried Treasure Stamp", "Bottled Faerie Stamp", "Kolvars Stamp", "Usul-in-waiting Stamp", "Scratchcard Kiosk Stamp", "The Drenched Stamp", "Alien Aisha Myriad Stamp", "Eraser of the Dark Faerie Stamp", "Scurvy Island Stamp", "Glowing Brain Tree Stamp", "Devilpuss Stamp", "Chocolate Factory Stamp", "Christmas Fir Stamp", "Chasm Beast Stamp", "Flying Korbats Stamp", "Plushie Slorg Stamp", "Gatekeeper Stamp", "Neopian Hospital Stamp", "Kou-Jong Tile Stamp", "Tazzalor Stamp", "Turmaculus Stamp", "Mystery Island Travel Stamp", "105 Castle Secrets Stamp", "Commemorative Defenders Stamp #3", "Smugglers Cove Stamp", "Kings Lens Stamp", "Hubrid Noxs Mountain Fortress Stamp", "Petpet Cannonball Stamp", "King Skarl Plushie Stamp", "Holographic Sakhmet City Stamp", "Faerie Bubbles Stamp", "Goregas Stamp"],
    "yellow");

    //    GREEN words. Black background, green text.

    defwords(["The Sleeper Constellation Stamp", "Luperus Centre Head Stamp", "Altador Magic Stamp", "Commemorative Defenders Stamp #4", "Dark Qasala Stamp", "Lava Monster Stamp", "Zombified Heroes Stamp", "Rainbow Pteri Feather Stamp", "Green Knight Stamp", "Meridell Castle Stamp", "The Academy Stamp", "Luperus Left Head Stamp", "Hot Dog Hero Stamp", "Haunted Mansion Stamp", "Gargarox Isafuhlarg Stamp", "Rainbow Pool Stamp", "Spyder Stamp", "Blumaroo Court Jester Stamp", "Orrin Stamp", "Dr. Sloth Stamp", "Tangor Stamp", "Finneus Stamp", "RIP Lucy Stamp", "Jelly World Stamp", "Astronomy Club Stamp", "Lupe Shopkeeper Stamp", "The Revenge Stamp", "Lost Desert Scroll Stamp", "Ski Lodge Stamp", "Dark Ilere Stamp", "Shadow Gulch Stamp", "Scordrax Stamp", "Shenkuu Helmet Stamp", "Cybunny on a Cycle Stamp", "Tyrannian Victory Day Stamp", "Talinia Stamp", "Space Faerie Stamp", "The Krawken Stamp", "Darigan Citadel Stamp", "Snowbunny Stamp", "Darkest Faerie Stamp", "Mr. Krawley Stamp", "Dorak Stamp", "Sticky Snowflake Stamp", "King Altador Stamp", "Jade Scorchstone Stamp", "Shumi Telescope Stamp", "Singed Tyrannian Volcano Stamp", "Lab Ray Stamp", "Moltara Town Hall Stamp", "Super Bright Rainbow Pool Stamp", "Wheel of Monotony Stamp", "Dark Faerie Stamp", "Florin Stamp", "Boris Stamp", "Cogs Togs Stamp", "Edna the Zafara Stamp", "Sentient Headstones Stamp", "Kreai Stamp", "Razul Stamp"],
    "green");

        //    BLUE words. Black background, blue text.

    defwords(["Darigan Spectre Stamp", "Sasha Stamp", "Dark Battle Duck Stamp", "Grimtooth Stamp", "Skeith Defender Stamp", "Quilin Stamp", "Sword Of Apocalypse Stamp", "Garin Stamp", "Count Von Roo Plushie Stamp", "Isca Stamp", "Jacques Stamp", "Rainbow Sticky Hand Stamp", "Darigan Moehog Stamp", "Usuki Doll Stamp", "Wise Gnorbu Stamp", "Battle Uni Stamp", "Lucky Coin Stamp", "Drackonack Stamp", "Gors The Mighty Stamp", "Mipsy Stamp", "Morris Stamp", "Von Roos Castle Stamp", "Golden Dubloon Stamp", "Grundo Warehouse Stamp", "Nabile Stamp", "Blugthak Stamp", "Swordsmaster Talek Stamp", "Aethia Stamp", "Capn Threelegs Stamp", "Gold Mote Stamp", "Tomos Stamp", "Altador Travel Stamp", "Faerie Slorg Stamp", "Lampwyck Stamp", "Christmas Scene Stamp", "Snowager Stamp", "Cliffhanger Stamp", "Negg Faerie Stamp", "Battle Slices Stamp", "Shenkuu Stamp", "Queen Fyora Stamp", "King Kelpbeard Stamp", "The Great Battle Stamp", "The Three Stamp", "King Jazan Stamp", "Misprint Meuka Stamp", "Scuzzy Stamp", "Need a Better Printer Stamp", "Nibbled Cooking Pot Stamp", "Holographic Virtupets Stamp", "Igneot Stamp", "Lord Kass Stamp", "Terask Stamp", "Holographic Coltzans Shrine Stamp", "Misaligned Printer Stamp", "ARGH!!!! DONNA STAMP", "Foil Slorg Stamp", "Foil Food Shop Stamp", "Inverted Space Faerie Stamp", "Xantan Stamp", "One Hundred Million Neopoint Stamp", "Upside Down Island Acara Stamp", "Ready to Roll Stamp", "Guardian Of Spectral Magic Stamp", "Nightsteed Stamp", "Ramtor Stamp", "Count Von Roo Stamp", "Jahbal Stamp", "Igneots Cavern Stamp", "Morguss Stamp", "NeoQuest Logo Stamp", "NeoQuest Hero Stamp", "Hadrak Stamp", "Court Dancer Stamp", "Meerca Spy Stamp", "NeoQuest II Esophagor Stamp", "Stone Stamp", "Geraptiku Stamp", "Torakor Stamp", "Virtupets Space Station Stamp", "Anubits Stamp", "Captain Bloodhook Stamp", "Shiny Monoceraptor Stamp", "Anshu Fishing Stamp", "Captain Scarblade Stamp", "Lost City of Phorofor Stamp", "Northern Watch Tower Stamp", "Feldon Dinksy Collibridge Stamp", "Forgotten Shore Stamp", "Fyoras Castle Stamp", "Yellow Knight Stamp", "Zafara Double Agent Stamp", "Biyako Stamp", "Jhudoras Cloud Stamp", "Luperus Right Head Stamp", "The Cyodrakes Gaze Stamp", "Jhudora Stamp", "Meridell Heroes Stamp"],
    "blue");

    //    Add one or more words to the dictionary with a specified class

    function defwords(words, which_class) {
    for (var i = 0; i < words.length; i++) {
        var w = words[i].replace(/^=/, "");
        patterns.push(new RegExp("([^a-zA-Z])(" + w + ")([^a-zA-Z])",
        words[i].match(/^=/) ? "g" : "gi"));
        classes.push(which_class);
    }
    }

    //    Quote HTML metacharacters in body text

    function quoteHTML(s) {
    s = s.replace(/&/g, "&amp;");
    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    return s;
    }

    //    Add one or more CSS style rules to the document

    function addGlobalStyle(css) {
    var head, style;
    head = document.getElementsByTagName('head')[0];
    if (!head) {
        return;
    }
    style = document.createElement('style');
    style.type = 'text/css';
    style.innerHTML = css;
    head.appendChild(style);
    }

    //    Apply highlighting replacements to a text sequence

    var curpat;             // Hidden argument to repmatch()
    var changes;            // Number of changes made by repmatch()

    function repmatch(matched, before, word, after) {
    changes++;
    return before + '<span class="' + classes[curpat] + '">' + word + '</span>' + after;
    }

    function highlight(s) {
    s = " " + s;
    for (curpat = 0; curpat < patterns.length; curpat++) {
        s = s.replace(patterns[curpat],
            repmatch);
    }
    return s.substring(1);
    }

    //    We only modify HTML/XHTML documents
    if (document.contentType &&
        (!(document.contentType.match(/html/i)))) {
        return;
    }

    // Highlight words in body copy

    var textnodes = document.evaluate("//body//text()", document, null,
        XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

    for (var i = 0; i < textnodes.snapshotLength; i++) {
    var node = textnodes.snapshotItem(i);
    /* Test whether this text node appears within a
       <style>, <script>, or <textarea> container.
       If so, it is not actual body text and must
       be left alone to avoid wrecking the page. */
    if (node.parentNode.tagName != "STYLE" &&
        node.parentNode.tagName != "TEXTAREA" &&
        node.parentNode.tagName != "SCRIPT") {
        /* Many documents have large numbers of empty text nodes.
           By testing for them, we avoid running all of our
           regular expressions over a target which they can't
           possibly match. */
        if (!(node.data.match(/^\s*$/))) {
        var s = " " + node.data + " ";
        changes = 0;
        var d = highlight(quoteHTML(s));
        if (changes > 0) {
            var rep = document.createElement("span");
            rep.innerHTML = d.substring(1, d.length - 1);
            node.parentNode.replaceChild(rep, node);
        }
        }
    }
    }

})();
